// Mocks generated by Mockito 5.4.4 from annotations
// in newkrakenanimelist/test/features/data/repositories/anime_repo_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:newkrakenanimelist/core/error/failures.dart' as _i5;
import 'package:newkrakenanimelist/core/network/network_info.dart' as _i9;
import 'package:newkrakenanimelist/features/anime_list/data/data_sources/anime_remote_data_source.dart'
    as _i3;
import 'package:newkrakenanimelist/features/anime_list/data/models/anime_detail_model.dart'
    as _i7;
import 'package:newkrakenanimelist/features/anime_list/data/models/anime_model.dart'
    as _i6;
import 'package:newkrakenanimelist/features/anime_list/data/models/character_model.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnimeRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRemoteDataSource extends _i1.Mock
    implements _i3.AnimeRemoteDataSource {
  MockAnimeRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.AnimeModel>>> fetchTopAnime(
    int? page,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTopAnime,
          [
            page,
            limit,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.AnimeModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.AnimeModel>>(
          this,
          Invocation.method(
            #fetchTopAnime,
            [
              page,
              limit,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.AnimeModel>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.AnimeDetailModel>> fetchAnimeDetail(
          int? malId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAnimeDetail,
          [malId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i7.AnimeDetailModel>>.value(
                _FakeEither_0<_i5.Failure, _i7.AnimeDetailModel>(
          this,
          Invocation.method(
            #fetchAnimeDetail,
            [malId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.AnimeDetailModel>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i8.CharacterModel>>> fetchAnimeCharacters(
          int? malId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAnimeCharacters,
          [malId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i8.CharacterModel>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.CharacterModel>>(
          this,
          Invocation.method(
            #fetchAnimeCharacters,
            [malId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.CharacterModel>>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
